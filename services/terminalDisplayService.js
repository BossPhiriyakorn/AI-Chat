const chalk = require('chalk');

class TerminalDisplayService {
  constructor() {
    this.isProduction = process.env.NODE_ENV === 'production';
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
   * @param {string} title - ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
   * @param {string} emoji - ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
   */
  showMainTitle(title, emoji = 'üöÄ') {
    if (this.isProduction) return;
    
    console.log('\n' + '='.repeat(60));
    console.log(`${emoji} ${title}`);
    console.log('='.repeat(60));
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢
   * @param {string} title - ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
   * @param {string} emoji - ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
   */
  showSubTitle(title, emoji = 'üìã') {
    if (this.isProduction) return;
    
    console.log(`\n${emoji} ${title}`);
    console.log('-'.repeat(40));
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API
   * @param {string} serviceName - ‡∏ä‡∏∑‡πà‡∏≠ service
   * @param {boolean} isAvailable - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
   * @param {string} details - ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
   */
  showApiStatus(serviceName, isAvailable, details = '') {
    if (this.isProduction) return;
    
    const status = isAvailable ? '‚úÖ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' : '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ';
    const color = isAvailable ? chalk.green : chalk.red;
    
    console.log('  ' + serviceName.padEnd(20) + ' : ' + color(status) + ' ' + details);
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
   * @param {string} source - ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   * @param {string} dataType - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   * @param {number} count - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   * @param {string} details - ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
   */
  showDataInfo(source, dataType, count, details = '') {
    if (this.isProduction) return;
    
    const countText = count > 0 ? chalk.green(count + ' ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£') : chalk.red('0 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    console.log('  üìä ' + source.padEnd(15) + ' : ' + dataType.padEnd(20) + ' ' + countText + ' ' + details);
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   * @param {string} message - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   * @param {string} type - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (info, warning, error, success)
   */
  showMessage(message, type = 'info') {
    if (this.isProduction) return;
    
    const icons = {
      info: '‚ÑπÔ∏è',
      warning: '‚ö†Ô∏è',
      error: '‚ùå',
      success: '‚úÖ'
    };
    
    const colors = {
      info: chalk.blue,
      warning: chalk.yellow,
      error: chalk.red,
      success: chalk.green
    };
    
    console.log('  ' + icons[type] + ' ' + colors[type](message));
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bot Configuration
   * @param {Object} config - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• configuration
   */
  showBotConfig(config) {
    if (this.isProduction) return;
    
    this.showSubTitle('ü§ñ Bot Configuration', 'ü§ñ');
    
    if (config.botName) {
      console.log('  ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó        : ' + chalk.cyan(config.botName));
    }
    
    if (config.personality) {
      const personality = config.personality.length > 50 
        ? config.personality.substring(0, 50) + '...' 
        : config.personality;
      console.log('  ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û      : ' + chalk.cyan(personality));
    }
    
    if (config.language) {
      console.log('  ‡∏†‡∏≤‡∏©‡∏≤          : ' + chalk.cyan(config.language));
    }
    
    if (config.tone) {
      console.log('  ‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á       : ' + chalk.cyan(config.tone));
    }
    
    if (config.businessInfo) {
      const businessInfo = config.businessInfo.length > 80 
        ? config.businessInfo.substring(0, 80) + '...' 
        : config.businessInfo;
      console.log('  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à    : ' + chalk.cyan(businessInfo));
    }
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google Sheets
   * @param {Array} keywords - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î
   * @param {Array} sheetNames - ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
   */
  showSheetsInfo(keywords, sheetNames) {
    if (this.isProduction) return;
    
    this.showSubTitle('üìä Google Sheets Data', 'üìä');
    
    if (sheetNames && sheetNames.length > 0) {
      console.log('  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤     : ' + chalk.cyan(sheetNames.length) + ' ‡∏´‡∏ô‡πâ‡∏≤');
      console.log('  ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤       : ' + chalk.cyan(sheetNames.join(', ')));
    }
    
    if (keywords && keywords.length > 0) {
      console.log('  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î : ' + chalk.green(keywords.length) + ' ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î
      const sampleKeywords = keywords.slice(0, 5).map(k => k.keyword);
      if (sampleKeywords.length > 0) {
        console.log('  ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î : ' + chalk.cyan(sampleKeywords.join(', ')));
      }
    } else {
      console.log('  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î : ' + chalk.red('0 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'));
    }
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google Docs
   * @param {Object} docsData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Docs
   */
  showDocsInfo(docsData) {
    if (this.isProduction) return;
    
    this.showSubTitle('üìÑ Google Docs Data', 'üìÑ');
    
    if (docsData && docsData.fullContent) {
      const contentLength = docsData.fullContent.length;
      console.log('  ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£     : ' + chalk.cyan(contentLength.toLocaleString()) + ' ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
      
      if (docsData.botName) {
        console.log('  ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó        : ' + chalk.cyan(docsData.botName));
      }
      
      if (docsData.personality) {
        const personality = docsData.personality.length > 60 
          ? docsData.personality.substring(0, 60) + '...' 
          : docsData.personality;
        console.log('  ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û      : ' + chalk.cyan(personality));
      }
      
      if (docsData.businessInfo) {
        const businessInfo = docsData.businessInfo.length > 60 
          ? docsData.businessInfo.substring(0, 60) + '...' 
          : docsData.businessInfo;
        console.log('  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à    : ' + chalk.cyan(businessInfo));
      }
    } else {
      console.log('  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£     : ' + chalk.red('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'));
    }
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
   * @param {Object} status - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
   */
  showConnectionStatus(status) {
    if (this.isProduction) return;
    
    this.showSubTitle('üîó API Connection Status', 'üîó');
    
    this.showApiStatus('Gemini AI', status.gemini, 'Text Generation');
    this.showApiStatus('Google Docs', status.googleDocs, 'Bot Configuration');
    this.showApiStatus('Google Sheets', status.googleSheets, 'Keywords Database');
    this.showApiStatus('LINE Bot', status.lineBot, 'Messaging API');
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   * @param {string} userId - User ID
   * @param {string} message - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   * @param {string} response - ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
   * @param {string} source - ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
   */
  showMessageProcessing(userId, message, response, source) {
    if (this.isProduction) return;
    
    console.log('\n' + chalk.blue('üí¨ Message Processing'));
    console.log(chalk.gray('‚îÄ'.repeat(50)));
    console.log('  üë§ User ID     : ' + chalk.cyan(userId));
    console.log('  üìù Message     : ' + chalk.yellow(message));
    console.log('  ü§ñ Response    : ' + chalk.green(response.substring(0, 100)) + (response.length > 100 ? '...' : ''));
    console.log('  üìç Source      : ' + chalk.magenta(source));
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
   * @param {Object} initData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
   */
  showInitialization(initData) {
    if (this.isProduction) return;
    
    this.showMainTitle('LINE AI Chatbot Initialization', 'üöÄ');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    this.showSubTitle('üñ•Ô∏è Server Information', 'üñ•Ô∏è');
    console.log('  Port          : ' + chalk.cyan(process.env.PORT || 3000));
    console.log('  Environment   : ' + chalk.cyan(process.env.NODE_ENV || 'development'));
    console.log('  Node Version  : ' + chalk.cyan(process.version));
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    if (initData.connectionStatus) {
      this.showConnectionStatus(initData.connectionStatus);
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bot Configuration
    if (initData.botConfig) {
      this.showBotConfig(initData.botConfig);
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google Sheets
    if (initData.sheetsData) {
      this.showSheetsInfo(initData.sheetsData.keywords, initData.sheetsData.sheetNames);
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google Docs
    if (initData.docsData) {
      this.showDocsInfo(initData.docsData);
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Auto Refresh
    if (initData.autoRefresh) {
      this.showSubTitle('üîÑ Auto Refresh Service', 'üîÑ');
      console.log('  Status        : ' + chalk.green('Active'));
      console.log('  Interval      : ' + chalk.cyan('1 minute'));
      console.log('  Next Refresh  : ' + chalk.cyan(new Date(Date.now() + 60000).toLocaleTimeString()));
    }
    
    console.log('\n' + '='.repeat(60));
    console.log(chalk.green('‚úÖ System Ready!') + ' ' + chalk.gray('Waiting for messages...'));
    console.log('='.repeat(60) + '\n');
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
   * @param {string} service - ‡∏ä‡∏∑‡πà‡∏≠ service
   * @param {Error} error - ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
   */
  showError(service, error) {
    if (this.isProduction) return;
    
    console.log('\n' + chalk.red('‚ùå Error in ' + service));
    console.log(chalk.red('‚îÄ'.repeat(50)));
    console.log('  Service       : ' + chalk.red(service));
    console.log('  Error         : ' + chalk.red(error.message));
    console.log('  Time          : ' + chalk.gray(new Date().toLocaleString()));
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
   * @param {string} message - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   * @param {string} details - ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
   */
  showSuccess(message, details = '') {
    if (this.isProduction) return;
    
    console.log('\n' + chalk.green('‚úÖ ' + message) + (details ? ' ' + chalk.gray(details) : ''));
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   * @param {string} message - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   * @param {string} details - ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
   */
  showWarning(message, details = '') {
    if (this.isProduction) return;
    
    console.log('\n' + chalk.yellow('‚ö†Ô∏è ' + message) + (details ? ' ' + chalk.gray(details) : ''));
  }
}

module.exports = { TerminalDisplayService };
